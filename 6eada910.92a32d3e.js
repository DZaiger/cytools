(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{122:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/files/tutorial-2311449bf155495d23516d859d00c929.ipynb"},71:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return b})),a.d(t,"default",(function(){return u}));var n=a(2),o=a(6),i=(a(0),a(84)),c=a(91),r=a(92),s={id:"tutorial",title:"Tutorial"},l={unversionedId:"getting-started/tutorial",id:"getting-started/tutorial",isDocsHomePage:!1,title:"Tutorial",description:"<link",source:"@site/docs/getting-started/tutorial.md",slug:"/getting-started/tutorial",permalink:"/docs/getting-started/tutorial",version:"current",sidebar:"docs",previous:{title:"Windows",permalink:"/docs/getting-started/windows"},next:{title:"Performance Tips",permalink:"/docs/getting-started/tips"}},b=[{value:"Docker Basics",id:"docker-basics",children:[]},{value:"Using CYTools",id:"using-cytools",children:[]},{value:"Polytopes",id:"polytopes",children:[]},{value:"Using the KS database",id:"using-the-ks-database",children:[]},{value:"Triangulations",id:"triangulations",children:[]},{value:"Calabi-Yaus",id:"calabi-yaus",children:[]},{value:"Cones",id:"cones",children:[]}],p={rightToc:b};function u(e){var t=e.components,s=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,s,{components:t,mdxType:"MDXLayout"}),Object(i.b)("link",{rel:"stylesheet",href:"https://cdn.jsdelivr.net/npm/katex@0.11.0/dist/katex.min.css",integrity:"sha384-BdGj8xC2eZkQaxoQ8nSLefg4AV4/AwB3Fj+8SUSo7pnKP6Eoy18liIKTPn9oBYNG",crossOrigin:"anonymous"}),Object(i.b)("p",{align:"center"},Object(i.b)("img",{src:"/img/teacher.svg?sanitize=true",height:"250"})),Object(i.b)("p",null,"Throughout this tutorial we assume that the Docker image of CYTools is being used, since this the recommended installation method."),Object(i.b)("p",null,"This tutorial is available as a ",Object(i.b)("a",{target:"_blank",href:a(122).default},"Jupyter notebook")," in case you want to follow it on JupyterLab."),Object(i.b)("h2",{id:"docker-basics"},"Docker Basics"),Object(i.b)("p",null,"There are two main ways of using the CYTools Docker image. It can be used via JupyterLab or directly on the terminal. The command used to run the image is:"),Object(i.b)(c.a,{defaultValue:"jupyter",values:[{label:"JupyterLab",value:"jupyter"},{label:"Terminal",value:"terminal"}],mdxType:"Tabs"},Object(i.b)(r.a,{value:"jupyter",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"docker run --rm -it -v ${PWD}:/home -p 8888:8888 cytools\n")),Object(i.b)("p",null,"Let us look at the meaning of each of the parts of this command."),Object(i.b)("ul",null,Object(i.b)("li",null,Object(i.b)("code",null,"docker run")," This simply creates a container where the image will run."),Object(i.b)("li",null,Object(i.b)("code",null,"--rm")," This instructs Docker to remove the container once it is closed. Since the url used to access JupyterLab changes every time there is generally no point in restarting the container once it is stopped."),Object(i.b)("li",null,Object(i.b)("code",null,"-it")," This specifies that we will be running an interactive session."),Object(i.b)("li",null,Object(i.b)("code",null,"-v ${PWD}:/home")," This is used to mount the current directory into the ",Object(i.b)("code",null,"/home")," directory of the container. ",Object(i.b)("code",null,"${PWD}")," can be changed to a different directory, but the full path needs to be specified."),Object(i.b)("li",null,Object(i.b)("code",null,"-p 8888:8888")," This is used to bind the port 8888 of the host computer to the port 8888 of the container so that JupyterLab can communicate. If another application is using port 8888 on the host computer then a different port can be specified before the colon, but it will also have to be changed on your browser."),Object(i.b)("li",null,Object(i.b)("code",null,"cytools")," Indicates the name of the image, which in this case is cytools."))),Object(i.b)(r.a,{value:"terminal",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{}),"docker run --rm -it -v ${PWD}:/home cytools python\n")),Object(i.b)("p",null,"Let us look at the meaning of each of the parts of this command."),Object(i.b)("ul",null,Object(i.b)("li",null,Object(i.b)("code",null,"docker run")," This simply creates a container where the image will run."),Object(i.b)("li",null,Object(i.b)("code",null,"--rm")," This instructs Docker to remove the container once it is closed. Since the url used to access JupyterLab changes every time there is generally no point in restarting the container once it is stopped."),Object(i.b)("li",null,Object(i.b)("code",null,"-it")," This specifies that we will be running an interactive session."),Object(i.b)("li",null,Object(i.b)("code",null,"-v ${PWD}:/home")," This is used to mount the current directory into the ",Object(i.b)("code",null,"/home")," directory of the container. ",Object(i.b)("code",null,"${PWD}")," can be changed to a different directory, but the full path needs to be specified."),Object(i.b)("li",null,Object(i.b)("code",null,"cytools")," Indicates the name of the image, which in this case is cytools."),Object(i.b)("li",null,Object(i.b)("code",null,"python")," This is used so that Python is started instead of JupyterLab, which is the default option. It is sometimes useful to use ",Object(i.b)("code",null,"bash")," to be dropped into a bash terminal in the container.")))),Object(i.b)("h2",{id:"using-cytools"},"Using CYTools"),Object(i.b)("p",null,"Let us now look at the basics of the CYTools package. The starting objects for most computations are the Polytope and Cone classes. These can be imported using"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from cytools import Polytope, Cone\n")),Object(i.b)("p",null,"Other important classes in this toolkit are Triangulation and CalabiYau. These should generally not be directly created by the user, and instead they are produced by designated functions."),Object(i.b)("p",null,"Let us take a brief look at each of these classes."),Object(i.b)("h2",{id:"polytopes"},"Polytopes"),Object(i.b)("p",null,"First, let's take a look at the Polytope class. A Polytope object can be created by specifying a list of points defining the convex hull. Note that CYTools only supports lattice polytopes so any floating point numbers will be truncated to integers."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"p = Polytope([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1],[-1,-1,-1,-1]])\n")),Object(i.b)("p",null,"We can print some information about the polytope as follows."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"p\n# Prints: A 4-dimensional reflexive lattice polytope in ZZ^4\n")),Object(i.b)("p",null,"The list of lattice points, boundary points, interior points, etc., can be computed by self-explanatory functions."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"pts = p.points()\n")),Object(i.b)("p",null,"We can compute information relevant to Batyrev's construction of Calabi-Yau hypersurfaces when the polytope is reflexive and 4-dimensional."),Object(i.b)("div",{className:"admonition admonition-important alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"To avoid ambiguity, one must specify if the polytope should be viewed as living in the M lattice or the N lattice."))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'p.h11(lattice="N"), p.h21(lattice="N")\n# Prints: (1, 101)\n')),Object(i.b)("h2",{id:"using-the-ks-database"},"Using the KS database"),Object(i.b)("p",null,"CYTools provides two useful functions to work with the KS database. We can import them as follows."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from cytools import read_polytopes, fetch_polytopes\n")),Object(i.b)("p",null,"The first function takes a file name as input and reads all polytopes specified in the format used in the KS database. The second file directly fetches the polytopes from the database. For example let's fetch 100 polytopes with ",Object(i.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(i.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("msup",{parentName:"mrow"},Object(i.b)("mi",{parentName:"msup"},"h"),Object(i.b)("mrow",{parentName:"msup"},Object(i.b)("mn",{parentName:"mrow"},"2"),Object(i.b)("mo",Object(n.a)({parentName:"mrow"},{separator:"true"}),","),Object(i.b)("mn",{parentName:"mrow"},"1"))),Object(i.b)("mo",{parentName:"mrow"},"="),Object(i.b)("mn",{parentName:"mrow"},"7")),Object(i.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"h^{2,1}=7")))),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.8141079999999999em",verticalAlign:"0em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal"}),"h"),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.8141079999999999em"}}),Object(i.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.063em",marginRight:"0.05em"}}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"2"),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mpunct mtight"}),","),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"1"))))))))),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"="),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}})),Object(i.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"7"))))),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'g = fetch_polytopes(h21=7, lattice="N", limit=100)\ng\n# Prints: <generator object read_polytopes at 0x7faf1656c3d0>\n')),Object(i.b)("p",null,"As you can see above, these functions return generator objects that give one polytope at a time. To get the polytopes we can use"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"p1 = next(g)\np2 = next(g)\n")),Object(i.b)("p",null,"Or to get the full list of polytopes we can use"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"l = list(g)\nlen(l)\n# Prints: 98\n")),Object(i.b)("p",null,"In this example generator had a limit of 100 polytopes, but since it had already generated two in the above it produced a list of only 98."),Object(i.b)("div",{className:"admonition admonition-important alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"If you are not familiar with Python, it is worth noting that generators raise and exception once they reach the end. For this reason, if you are using the ",Object(i.b)("inlineCode",{parentName:"p"},"next")," function in your code it is usually necessary to wrap this with try-except statements as in the following example."))),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python",metastring:"{3,6}","{3,6}":!0}),'g = fetch_polytopes(h21=2, lattice="N", limit=100)\nfor i in range(100):\n    try:\n      p = next(g)\n      print(f"Fetched polytope {i}")\n    except StopIteration:\n      print(f"Iteration stopped at number {i}")\n      break\n')),Object(i.b)("p",null,"Alternatively, one can conveniently use generators in the following way."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python",metastring:"{2}","{2}":!0}),'g = fetch_polytopes(h21=2, lattice="N", limit=100)\nfor p in g:\n    # Do something\n')),Object(i.b)("h2",{id:"triangulations"},"Triangulations"),Object(i.b)("p",null,"Let us now look at how we can triangulate the polytopes. We start with the following polytope"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"p = Polytope([[1,0,0,0],[0,1,0,0],[0,0,1,0],[-1,1,1,0],[0,-1,-1,0],[0,0,0,1],[1,-2,1,1],[-2,2,0,-1],[1,0,-1,-1]])\n")),Object(i.b)("p",null,"We can obtain a triangulation simply by using"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"t = p.triangulate()\n")),Object(i.b)("p",null,"and print information about the triangulation as follows"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"t\n# Prints: A fine, regular, star triangulation of a 4-dimensional polytope in ZZ^4\n")),Object(i.b)("p",null,"For 4-dimensional reflexive polytopes it defaults to finding an FRST of the points not interior to facets. Other options such as heights, whether to make it a star, the backend, etc., can be inputted as well."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'t = p.triangulate(heights=[0,3,7,1,9,1,1,1,3,2,2,2], make_star=True, backend="cgal")\n')),Object(i.b)("p",null,"Various properties of the triangulation can be accessed by self-explanatory functions."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"simps = t.simplices()\n")),Object(i.b)("p",null,"Some of these require additional software that are included in the Docker image. For example, finding triangulations that differ by a bistellar flip requires TOPCOM."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"triangs = t.neighbor_triangs()\n")),Object(i.b)("p",null,"If one wants to generate random triangulations, one for example can pick random heights around the Delaunay triangulation. These do not always produce fine triangulations, so this needs to be checked. So we could obtain say 100 fine, regular, star triangulations in the following way."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"import numpy as np\ntriangs = []\nalpha = 0.1\nwhile len(triangs) < 100:\n    heights = [pt.dot(pt) + alpha*np.random.random() for pt in p.points_not_interior_to_facets()]\n    t = p.triangulate(heights=heights)\n    if t.is_fine():\n        triangs.append(t)\n")),Object(i.b)("p",null,"where the coefficient ",Object(i.b)("inlineCode",{parentName:"p"},"alpha")," can be adjusted so that fine triangulations are obtained at a reasonable rate."),Object(i.b)("div",{className:"admonition admonition-important alert alert--info"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"tip")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"The above method to find triangulations is fast, but does not produce a fair sampling of triangulations. This can be done with the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/documentation/polytope#random_triangulations"}),"p.random_triangulations")," function."))),Object(i.b)("h2",{id:"calabi-yaus"},"Calabi-Yaus"),Object(i.b)("p",null,"Let's now get to the class of most interest. A CalabiYau object can be obtained from a triangulation using."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"cy = t.get_cy()\n")),Object(i.b)("p",null,"Basic information can be printed as follows."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"cy\n# Prints: A Calabi-Yau 3-fold hypersurface with h11=7 and h21=23 in a 4-dimensional toric variety.\n")),Object(i.b)("p",null,"Various properties of the CY can be accessed by self-explanatory functions. For example, intersection numbers can be computed using"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"intnums = cy.intersection_numbers()\n")),Object(i.b)("h2",{id:"cones"},"Cones"),Object(i.b)("p",null,"Lastly, let's briefly look at cones. These can be constructed by specifying a set of rays or normals to hyperplanes."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"c1 = Cone([[0,1],[1,1]])\nc2 = Cone(hyperplanes=[[0,1],[1,1]])\n")),Object(i.b)("p",null,"Let us look at the Mori cone of the ambient variety of the above Calabi-Yau."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"mc = cy.ambient_mori_cone()\n")),Object(i.b)("p",null,"We can print some information about it as follows."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"mc\n# Prints: A 7-dimensional rational polyhedral cone in RR^7 generated by 36 rays\n")),Object(i.b)("p",null,"The Kahler cone can be computed from the designated function, or by taking the dual."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"kc = mc.dual()\n")),Object(i.b)("p",null,"CYTools uses a lazy duality where no computation is done and instead the definition of the cone is dualized. This can be seen by printing the information."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"kc\n# Prints: A rational polyhedral cone in RR^7 defined by 36 hyperplanes.\n")),Object(i.b)("p",null,"However, we can still do the hard duality computation if desired."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"kc_rays = kc.rays()\n")),Object(i.b)("p",null,"And then the definition of the cone is updated."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"kc\n# Prints: A 7-dimensional rational polyhedral cone in RR^7 generated by 18 rays.\n")),Object(i.b)("p",null,"We can compute the distance to the tip of the stretched Kahler cone as follows."),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"d,v = kc.tip_of_stretched_cone(1)\n")),Object(i.b)("p",null,"This concludes the brief tutorial. We have some additional ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"./tips"}),"tips")," for people who intend to perform large-scale computations with CYTools. For a full list of available classes and functions please visit the ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/documentation/"}),"documentation tab"),"."))}u.isMDXComponent=!0},84:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return d}));var n=a(0),o=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=o.a.createContext({}),b=function(e){var t=o.a.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=b(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=b(a),m=n,d=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return a?o.a.createElement(d,r(r({ref:t},l),{},{components:a})):o.a.createElement(d,r({ref:t},l))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,c=new Array(i);c[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:n,c[1]=r;for(var l=2;l<i;l++)c[l]=a[l];return o.a.createElement.apply(null,c)}return o.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},86:function(e,t,a){"use strict";function n(e){var t,a,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(o&&(o+=" "),o+=a);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,a=0,o="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(o&&(o+=" "),o+=t);return o}},87:function(e,t,a){"use strict";var n=a(0),o=Object(n.createContext)(void 0);t.a=o},88:function(e,t,a){"use strict";var n=a(0),o=a(87);t.a=function(){var e=Object(n.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},91:function(e,t,a){"use strict";var n=a(0),o=a.n(n),i=a(88),c=a(86),r=a(47),s=a.n(r),l=37,b=39;t.a=function(e){var t=e.block,a=e.children,r=e.defaultValue,p=e.values,u=e.groupId,m=Object(i.a)(),d=m.tabGroupChoices,h=m.setTabGroupChoices,O=Object(n.useState)(r),j=O[0],f=O[1],g=Object(n.useState)(!1),y=g[0],N=g[1];if(null!=u){var v=d[u];null!=v&&v!==j&&p.some((function(e){return e.value===v}))&&f(v)}var w=function(e){f(e),null!=u&&h(u,e)},k=[],T=function(e){e.metaKey||e.altKey||e.ctrlKey||N(!0)},x=function(){N(!1)};return Object(n.useEffect)((function(){window.addEventListener("keydown",T),window.addEventListener("mousedown",x)}),[]),o.a.createElement("div",null,o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(c.a)("tabs",{"tabs--block":t})},p.map((function(e){var t=e.value,a=e.label;return o.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===t,className:Object(c.a)("tabs__item",s.a.tabItem,{"tabs__item--active":j===t}),style:y?{}:{outline:"none"},key:t,ref:function(e){return k.push(e)},onKeyDown:function(e){!function(e,t,a){switch(a.keyCode){case b:!function(e,t){var a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()}(e,t);break;case l:!function(e,t){var a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()}(e,t)}}(k,e.target,e),T(e)},onFocus:function(){return w(t)},onClick:function(){w(t),N(!1)},onPointerDown:function(){return N(!1)}},a)}))),o.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(a).filter((function(e){return e.props.value===j}))[0]))}},92:function(e,t,a){"use strict";var n=a(0),o=a.n(n);t.a=function(e){return o.a.createElement("div",null,e.children)}}}]);