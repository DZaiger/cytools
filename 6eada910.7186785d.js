(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{121:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/files/tutorial-6dca050b1d955f098d804a45ff0d442b.ipynb"},71:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return r})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return l}));var n=a(2),c=a(6),o=(a(0),a(84)),s={id:"tutorial",title:"Tutorial"},r={unversionedId:"getting-started/tutorial",id:"getting-started/tutorial",isDocsHomePage:!1,title:"Tutorial",description:"<link",source:"@site/docs/getting-started/tutorial.md",slug:"/getting-started/tutorial",permalink:"/docs/getting-started/tutorial",version:"current",sidebar:"docs",previous:{title:"Windows",permalink:"/docs/getting-started/windows"},next:{title:"Advanced usage",permalink:"/docs/getting-started/advanced"}},i=[{value:"Polytopes",id:"polytopes",children:[]},{value:"Using the Kreuzer-Skarke database",id:"using-the-kreuzer-skarke-database",children:[]},{value:"Triangulations",id:"triangulations",children:[]},{value:"Calabi-Yaus",id:"calabi-yaus",children:[]},{value:"Cones",id:"cones",children:[]}],b={rightToc:i};function l(e){var t=e.components,s=Object(c.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},b,s,{components:t,mdxType:"MDXLayout"}),Object(o.b)("link",{rel:"stylesheet",href:"https://cdn.jsdelivr.net/npm/katex@0.11.0/dist/katex.min.css",integrity:"sha384-BdGj8xC2eZkQaxoQ8nSLefg4AV4/AwB3Fj+8SUSo7pnKP6Eoy18liIKTPn9oBYNG",crossOrigin:"anonymous"}),Object(o.b)("p",{align:"center"},Object(o.b)("img",{src:"/img/teacher.svg?sanitize=true",height:"250"})),Object(o.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"note")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"This tutorial is available as a Jupyter notebook that you can download at ",Object(o.b)("a",{target:"_blank",href:a(121).default},"this link")," in case you want to follow along."))),Object(o.b)("p",null,"Let us look at the basics of the CYTools package. The starting objects for most computations are the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/documentation/polytope"}),Object(o.b)("inlineCode",{parentName:"a"},"Polytope"))," and ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/documentation/cone"}),Object(o.b)("inlineCode",{parentName:"a"},"Cone"))," classes. These can be imported as follows."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from cytools import Polytope, Cone\n")),Object(o.b)("p",null,"Other important classes in this package are ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/documentation/triangulation"}),Object(o.b)("inlineCode",{parentName:"a"},"Triangulation"))," and ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/documentation/calabiyau"}),Object(o.b)("inlineCode",{parentName:"a"},"CalabiYau")),". These should generally not be directly constructed by the user, and instead they are produced by designated functions."),Object(o.b)("p",null,"Let us take a brief look at each of the classes."),Object(o.b)("h2",{id:"polytopes"},"Polytopes"),Object(o.b)("p",null,"First, let's take a look at the ",Object(o.b)("inlineCode",{parentName:"p"},"Polytope")," class. A ",Object(o.b)("inlineCode",{parentName:"p"},"Polytope")," object can be created by specifying a list of points defining the convex hull. Note that CYTools only supports lattice polytopes so any floating point numbers will be truncated to integers."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"p = Polytope([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1],[-1,-1,-1,-1]])\n")),Object(o.b)("p",null,"We can print some information about the polytope as follows."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"p\n# Prints: A 4-dimensional reflexive lattice polytope in ZZ^4\n")),Object(o.b)("p",null,"The list of lattice points, boundary points, interior points, etc., can be computed by self-explanatory functions."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"pts = p.points()\npts\n# Prints: array([[ 0,  0,  0,  0],\n#                [-1, -1, -1, -1],\n#                [ 0,  0,  0,  1],\n#                [ 0,  0,  1,  0],\n#                [ 0,  1,  0,  0],\n#                [ 1,  0,  0,  0]])\n")),Object(o.b)("p",null,"We can compute information relevant to Batyrev's construction of Calabi-Yau hypersurfaces when the polytope is reflexive and 4-dimensional."),Object(o.b)("div",{className:"admonition admonition-important alert alert--info"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"To avoid ambiguity, one must specify if the polytope should be viewed as living in the ",Object(o.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(o.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(o.b)("semantics",{parentName:"math"},Object(o.b)("mrow",{parentName:"semantics"},Object(o.b)("mi",{parentName:"mrow"},"M")),Object(o.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"M")))),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal",style:{marginRight:"0.10903em"}}),"M")))))," lattice or the ",Object(o.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(o.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(o.b)("semantics",{parentName:"math"},Object(o.b)("mrow",{parentName:"semantics"},Object(o.b)("mi",{parentName:"mrow"},"N")),Object(o.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"N")))),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}})),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal",style:{marginRight:"0.10903em"}}),"N")))))," lattice."))),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'p.h11(lattice="N"), p.h21(lattice="N")\n# Prints: (1, 101)\n')),Object(o.b)("h2",{id:"using-the-kreuzer-skarke-database"},"Using the Kreuzer-Skarke database"),Object(o.b)("p",null,"CYTools provides two useful functions to work with the Kreuzer-Skarke (KS) database. We can import them as follows."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from cytools import read_polytopes, fetch_polytopes\n")),Object(o.b)("p",null,"The first function takes a file name as input and reads all polytopes specified in the format used in the KS database. The second file directly fetches the polytopes from the database. For example let's fetch 100 polytopes with ",Object(o.b)("span",Object(n.a)({parentName:"p"},{className:"math math-inline"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"katex"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"katex-mathml"}),Object(o.b)("math",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/1998/Math/MathML"}),Object(o.b)("semantics",{parentName:"math"},Object(o.b)("mrow",{parentName:"semantics"},Object(o.b)("msup",{parentName:"mrow"},Object(o.b)("mi",{parentName:"msup"},"h"),Object(o.b)("mrow",{parentName:"msup"},Object(o.b)("mn",{parentName:"mrow"},"2"),Object(o.b)("mo",Object(n.a)({parentName:"mrow"},{separator:"true"}),","),Object(o.b)("mn",{parentName:"mrow"},"1"))),Object(o.b)("mo",{parentName:"mrow"},"="),Object(o.b)("mn",{parentName:"mrow"},"7")),Object(o.b)("annotation",Object(n.a)({parentName:"semantics"},{encoding:"application/x-tex"}),"h^{2,1}=7")))),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"katex-html","aria-hidden":"true"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.8141079999999999em",verticalAlign:"0em"}})),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"mord mathnormal"}),"h"),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"msupsub"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-t"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"vlist-r"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"vlist",style:{height:"0.8141079999999999em"}}),Object(o.b)("span",Object(n.a)({parentName:"span"},{style:{top:"-3.063em",marginRight:"0.05em"}}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"pstrut",style:{height:"2.7em"}})),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"sizing reset-size6 size3 mtight"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"2"),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"mpunct mtight"}),","),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"mord mtight"}),"1"))))))))),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"mrel"}),"="),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"mspace",style:{marginRight:"0.2777777777777778em"}}))),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"base"}),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}})),Object(o.b)("span",Object(n.a)({parentName:"span"},{className:"mord"}),"7"))))),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'g = fetch_polytopes(h21=7, lattice="N", limit=100)\ng\n# Prints: <generator object read_polytopes at 0x7faf1656c3d0>\n')),Object(o.b)("p",null,"As you can see above, these functions return generator objects that give one polytope at a time. To get the polytopes we can use"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"p1 = next(g)\np2 = next(g)\n")),Object(o.b)("p",null,"Or to get the full list of polytopes we can use"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"l = list(g)\nlen(l)\n# Prints: 98\n")),Object(o.b)("p",null,"In this example generator had a limit of 100 polytopes, but since it had already generated two in the above it produced a list of only 98."),Object(o.b)("div",{className:"admonition admonition-important alert alert--info"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"important")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"If you are not familiar with Python, it is worth noting that generators raise and exception once they reach the end. For this reason, if you are using the ",Object(o.b)("inlineCode",{parentName:"p"},"next")," function in your code it is usually necessary to wrap this with try-except statements as in the following example."))),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python",metastring:"{3,6}","{3,6}":!0}),'g = fetch_polytopes(h21=2, lattice="N", limit=100)\nfor i in range(100):\n    try:\n      p = next(g)\n      print(f"Fetched polytope {i}")\n    except StopIteration:\n      print(f"Iteration stopped at number {i}")\n      break\n')),Object(o.b)("p",null,"Alternatively, one can conveniently use generators in the following way."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python",metastring:"{2}","{2}":!0}),'g = fetch_polytopes(h21=2, lattice="N", limit=100)\nfor p in g:\n    # Do something\n')),Object(o.b)("h2",{id:"triangulations"},"Triangulations"),Object(o.b)("p",null,"Let us now look at how we can triangulate the polytopes. We start with the following polytope"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"p = Polytope([[1,0,0,0],[0,1,0,0],[0,0,1,0],[-1,1,1,0],[0,-1,-1,0],[0,0,0,1],[1,-2,1,1],[-2,2,0,-1],[1,0,-1,-1]])\n")),Object(o.b)("p",null,"We can obtain a triangulation simply by using"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"t = p.triangulate()\n")),Object(o.b)("p",null,"and print information about the triangulation as follows"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"t\n# Prints: A fine, regular, star triangulation of a 4-dimensional polytope in ZZ^4\n")),Object(o.b)("p",null,"For 4-dimensional reflexive polytopes it defaults to finding an FRST of the points not interior to facets. Other options such as heights, whether to make it a star, the backend, etc., can be inputted as well."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'t = p.triangulate(heights=[0,3,7,1,9,1,1,1,3,2,2,2], make_star=True, backend="cgal")\n')),Object(o.b)("p",null,"Various properties of the triangulation can be accessed by self-explanatory functions."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"simps = t.simplices()\n")),Object(o.b)("p",null,"Some of these require additional software that are included in the Docker image. For example, finding triangulations that differ by a bistellar flip requires TOPCOM."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"triangs = t.neighbor_triangulations()\n")),Object(o.b)("p",null,"If one wants to generate random triangulations, one for example can pick random heights around the Delaunay triangulation. This can be done with the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/documentation/polytope#random_triangulations_fast"}),Object(o.b)("inlineCode",{parentName:"a"},"random_triangulations_fast"))," function."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"triangs = p.random_triangulations_fast(N=100)\n")),Object(o.b)("div",{className:"admonition admonition-important alert alert--info"},Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(o.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"tip")),Object(o.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"The above method to find triangulations is fast, but does not produce a fair sampling of triangulations. This can be done with the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/documentation/polytope#random_triangulations_fair"}),"random_triangulations_fair")," function."))),Object(o.b)("h2",{id:"calabi-yaus"},"Calabi-Yaus"),Object(o.b)("p",null,"Let's now get to the class of most interest. A ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/documentation/calabiyau"}),Object(o.b)("inlineCode",{parentName:"a"},"CalabiYau"))," object can be obtained from a triangulation using."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"cy = t.get_cy()\n")),Object(o.b)("p",null,"Basic information can be printed as follows."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"cy\n# Prints: A Calabi-Yau 3-fold hypersurface with h11=7 and h21=23 in a 4-dimensional toric variety.\n")),Object(o.b)("p",null,"Various properties of the CY can be accessed by self-explanatory functions. For example, intersection numbers can be computed using"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"intnums = cy.intersection_numbers()\n")),Object(o.b)("h2",{id:"cones"},"Cones"),Object(o.b)("p",null,"Lastly, let's briefly look at cones. These can be constructed by specifying a set of rays or normals to hyperplanes."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"c1 = Cone([[0,1],[1,1]])\nc2 = Cone(hyperplanes=[[0,1],[1,1]])\n")),Object(o.b)("p",null,"Let us look at the Mori cone of the ambient toric variety above Calabi-Yau."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"mc = cy.ambient_mori_cone()\n")),Object(o.b)("p",null,"We can print some information about it as follows."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"mc\n# Prints: A 7-dimensional rational polyhedral cone in RR^7 generated by 36 rays\n")),Object(o.b)("p",null,"The K\xe4hler cone can be computed from the designated function, or by taking the dual."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"kc = mc.dual()\n")),Object(o.b)("p",null,"CYTools uses a lazy duality where no computation is done and instead the definition of the cone is dualized. This can be seen by printing the information."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"kc\n# Prints: A rational polyhedral cone in RR^7 defined by 36 hyperplanes.\n")),Object(o.b)("p",null,"However, we can still do the hard duality computation if desired."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"kc_rays = kc.rays()\n")),Object(o.b)("p",null,"And then the definition of the cone is updated."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"kc\n# Prints: A 7-dimensional rational polyhedral cone in RR^7 generated by 18 rays.\n")),Object(o.b)("p",null,"We can compute the distance to the tip of the stretched K\xe4hler cone as follows."),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"d,v = kc.tip_of_stretched_cone(1)\n")),Object(o.b)("p",null,"This concludes the brief tutorial. We have some additional ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"./advanced"}),"advanced usage instructions")," for people who intend to perform large-scale computations with CYTools or who want to tinker with the Docker image. For a full list of available classes and functions please visit the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/documentation/"}),"documentation tab"),"."))}l.isMDXComponent=!0},84:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return O}));var n=a(0),c=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,c=function(e,t){if(null==e)return{};var a,n,c={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(c[a]=e[a]);return c}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(c[a]=e[a])}return c}var b=c.a.createContext({}),l=function(e){var t=c.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=l(e.components);return c.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return c.a.createElement(c.a.Fragment,{},t)}},d=c.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,b=i(e,["components","mdxType","originalType","parentName"]),p=l(a),d=n,O=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return a?c.a.createElement(O,r(r({ref:t},b),{},{components:a})):c.a.createElement(O,r({ref:t},b))}));function O(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=d;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r.mdxType="string"==typeof e?e:n,s[1]=r;for(var b=2;b<o;b++)s[b]=a[b];return c.a.createElement.apply(null,s)}return c.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);